#ifndef _LINEAR_SINE_H_
#define _LINEAR_SINE_H_
#include <cmath>
#include <vector>
#include <map>
#include <tuple>
#include <functional>
#include <cstdio>
#include "sineTest.h" 
#define pi 3.141592653589793238462643383279502884

//double A[46] = {1.000000000000000,0.3920728981459734,0.2054941977153648,0.1255215555455596,0.08430453420374484,0.06039812888666856,0.04534085426156199,0.03526230556139885,0.02819335781666784,0.02304814038583440,0.01918875684804613,0.01622085642666156,0.01389017629493755,0.01202688955092234,0.01051410791388616,0.009269271336258557,0.008232738283953360,0.007360562818185672,0.006619791899544834,0.005985326621337952,0.005437780473672590,0.004961988712663673,0.004545952217733601,0.004180076999313144,0.003856618478106635,0.003569269900377278,0.003312853719443115,0.003083087538944056,0.002876404729737558,0.002689815604413330,0.002520799003233042,0.002367216912819337,0.002227246692733584,0.002099326880737147,0.001982113555483963,0.001874444970866353,0.001775312718093552,0.001683838074432788,0.001599252499618087,0.001520881469276695,0.001448131008654960,0.001380476423371104,0.001317452827009154,0.001258647145522401,0.0012036913411243,0.0011522566477};
double A[101] = {1.000000000000000,0.3920728981459734,0.2054941977153648,0.1255215555455596,0.08430453420374484,0.06039812888666856,0.04534085426156199,0.03526230556139885,0.02819335781666784,0.02304814038583440,0.01918875684804613,0.01622085642666156,0.01389017629493755,0.01202688955092234,0.01051410791388616,0.009269271336258557,0.008232738283953360,0.007360562818185672,0.006619791899544834,0.005985326621337952,0.005437780473672590,0.004961988712663673,0.004545952217733601,0.004180076999313144,0.003856618478106635,0.003569269900377278,0.003312853719443115,0.003083087538944056,0.002876404729737558,0.002689815604413330,0.002520799003233042,0.002367216912819337,0.002227246692733584,0.002099326880737147,0.001982113555483963,0.001874444970866353,0.001775312718093552,0.001683838074432788,0.001599252499618087,0.001520881469276695,0.001448131008654960,0.001380476423371104,0.001317452827009154,0.001258647145522401,0.001203691341124307,0.001152256647695908,0.001104048648795546,0.001058803060432453,0.001016282105617899,0.0009762713876801017,0.0009385771854552732,0.0009030241065462467,0.0008694530454935972,0.0008377194024176880,0.0008076915248452581,0.0007792493413320859,0.0007522831603727192,0.0007266926121393699,0.0007023857139669155,0.0006792780433216502,0.0006572920043564327,0.0006363561761438733,0.0006164047323569074,0.0005973769235852669,0.0005792166146801525,0.0005618718705432226,0.0005452945846490235,0.0005294401453362532,0.0005142671355427380,0.0004997370622082591,0.0004858141120422219,0.0004724649307611216,0.0004596584232535062,0.0004473655724357694,0.0004355592748274534,0.0004242141911055783,0.0004133066100986983,0.0004028143248570653,0.0003927165195889653,0.0003829936663879668,0.0003736274307940503,0.0003646005853355444,0.0003558969302903590,0.0003475012209857753,0.0003393991010274194,0.0003315770409111957,0.0003240222815279153,0.0003167227821200184,0.0003096671722939267,0.0003028447077308384,0.0002962452292737818,0.0002898591250999729,0.0002836772957154311,0.0002776911215337651,0.0002718924328234009,0.0002662734818275746,0.0002608269168794095,0.0002555457583505808,0.0002504233762866245,0.0002454534695950688,0.0002406300466643862};
// In c++, structs are much like classes, except they default to public
// class LinearSine : public SinePrototype would also work here
struct LinearSine : SinePrototype
{
    private:
        double* Sn;
        double** coefOfLn;
        double* coefn;
        int nm;

    void S() {
        // fill out <sin(x), x^n>
        Sn[0] = 0.;
        Sn[1] = 1.;
        for (int i = 2; i <= nm; i++) {
            if (i%2 == 1 && (i-1)/2 < 46) {
                Sn[i] = A[(i-1)/2];
            } else {
                Sn[i] = (i%2 == 0) ? 0 : 1 - (i-1)*i*Sn[i-2]/pi/pi;
            }
            // printf("S(%d) = %f\n",i,Sn[i]);
        }
    }

    void coefOfL(int n){
        // invariant, coefOfL(n-1) has been called
        coefOfLn[n] = (double*)malloc(sizeof(double)*(n+3));
        if (n == 0) {
            coefOfLn[n][0] = 1.;
        } else if (n == 1) {
            coefOfLn[n][0] = 0.;
            coefOfLn[n][1] = 1.;
        } else {
            double* a = coefOfLn[n-1];
            double* b = coefOfLn[n-2];
            b[n-1] = 0; b[n] = 0;
            coefOfLn[n][0] = -(n-1.0)*b[0]/n;
            // printf("coefOfL(%d)[%d] = %f\n",n,0,coefOfLn[n][0]);
            for (int i = 1; i <= n; i++) {
                coefOfLn[n][i] = ((2*n-1)*a[i-1] - (n-1.0)*b[i])/n;
                // printf("coefOfL(%d)[%d] = %f\n",n,i,coefOfLn[n][i]);
            }
        }
    }

    double innerSin(int n) { 
        // computes <sin(x), Ln(x)>
        double* c = coefOfLn[n];
        double ret = 0.0;
        for (int i = 0; i <= n; i++) {
            ret += 2*c[i]*Sn[i];
        }
        return ret;
    }

    double innerL(int n) {
        // computes <Ln(x), Ln(x)>
        double* c = coefOfLn[n];
        double* r = (double*)malloc(sizeof(double)*(2*n+1));
        for (int i = 0; i < 2*n+1; i++) {
            r[i] = 0;
        }
        for (int i = 0; i <= n; i++) {
            double x = c[i];
            for (int j = 0; j <= n; j++) {
                double y = c[j];
                r[i+j] += x*y;
            }
        }
        // r is the coefficient of (x/pi)^k
        // compute r . \int_{-\pi}^\pi (x/pi)^k dx = r . \frac{1}{k+1} = 2pi/(2k+1)
        double ret = 0;
        for (int i = 0; i < 2*n+1; i++) {
            ret += r[i]*2*pi/(i+1);
        }
        return ret;
    }

    void coef() {
        for (int k = 0; k <= nm; k++) {
            coefn[k] = innerSin(k)/innerL(k);
            printf("%.20e\n",innerSin(k)/innerL(k));
        }
    }

    double evalL(double x) {
        double a = 1.0, b = x/pi;
        double ret = coefn[0] + b * coefn[1];
        for (int n = 2; n <= nm; n++) {
            double c = ((x/pi)*(2*n-1)*b - (n-1)*a)/n;
            a = b; b = c;
            // printf("L[%d](x) = %f\n",n,c );
            ret += coefn[n] * c;
        }
        return ret;
    }

    public:
    // Define your functions here 
    // Class Constructor
	LinearSine(const int nn) : SinePrototype()  
    {
        // Initialize and prepare interpolation of sine
        // nm = 20 ? nn > 20 : nn;
        nm = nn;
        Sn = (double*)malloc(sizeof(double)*(nn+1));
        coefOfLn = (double**)malloc(sizeof(double*)*(nn+1));
        S();
        for (int i = 0; i <= nn; i++) coefOfL(i);
        coefn = (double*)malloc(sizeof(double)*(nn+1));
        coef();
    }

    // Your sine function
	double sine(double x) {
        // -evalL(x-pi) = sin(x)    
        //x -= pi;
        const double u = x/pi-1;
        double a = 1, b = u;
        double ret = - b * coefn[1];
        //double* cf = &coefn[2];
        a = (u*3*b - a)/2;
        b = (u*5*a - 2*b)/3;
        ret -= coefn[3] * b;
        a = (u*7*b - 3*a)/4;
        b = (u*9*a - 4*b)/5;
        ret -= coefn[5] * b;
        a = (u*11*b - 5*a)/6;
        b = (u*13*a - 6*b)/7;
        ret -= coefn[7] * b;
        a = (u*15*b - 7*a)/8;
        b = (u*17*a - 8*b)/9;
        ret -= coefn[9] * b;
        a = (u*19*b - 9*a)/10;
        b = (u*21*a - 10*b)/11;
        ret -= coefn[11] * b;
        a = (u*23*b - 11*a)/12;
        b = (u*25*a - 12*b)/13;
        ret -= coefn[13] * b;
        a = (u*27*b - 13*a)/14;
        b = (u*29*a - 14*b)/15;
        ret -= coefn[15] * b;
        a = (u*31*b - 15*a)/16;
        b = (u*33*a - 16*b)/17;
        return ret - coefn[17] * b;
        /*
double ret = - b * 9.54929658551372129160e-01;
        //double* cf = &coefn[2];
        a = (u*3*b - a)/2;
        b = (u*5*a - 2*b)/3;
        ret -= -1.15824191219941163844 * b;
        a = (u*7*b - 3*a)/4;
        b = (u*9*a - 4*b)/5;
        ret -= 2.19289547216230173987e-01 * b;
        a = (u*11*b - 5*a)/6;
        b = (u*13*a - 6*b)/7;
        ret -= -1.66422669179708306031e-02 * b;
        a = (u*15*b - 7*a)/8;
        b = (u*17*a - 8*b)/9;
        ret -= 6.82206702648516390662e-04 * b;
        a = (u*19*b - 9*a)/10;
        b = (u*21*a - 10*b)/11;
        ret -= -1.75389258187511786402e-05 * b;
        a = (u*23*b - 11*a)/12;
        b = (u*25*a - 12*b)/13;
        ret -= 3.09517474866060301973e-07 * b;
        a = (u*27*b - 13*a)/14;
        b = (u*29*a - 14*b)/15;
        ret -= -3.98020663683494618096e-09 * b;
        a = (u*31*b - 15*a)/16;
        b = (u*33*a - 16*b)/17;
        return ret - 3.79971073153598056206e-11 * b;
        */
        /*c = (u*33*b - 17*a)/n;
        a = b; b = c;
        ret -= (*(cf++)) * c;
        c = (u*35*b - 18*a)/n;
        a = b; b = c;
        ret -= (*(cf++)) * c;
        return ret;*/
        //return -evalL(x-pi);
	}

};
#endif
